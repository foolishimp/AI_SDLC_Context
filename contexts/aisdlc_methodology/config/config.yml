methodology:
  name: Sacred Seven Development Methodology
  origin: https://github.com/foolishimp/ai_init
  version: "1.0"

  principles:
    _uri: "file://docs/principles/SACRED_SEVEN.md"

    test_driven_development:
      principle: 1
      mantra: "No code without tests"
      workflow: RED → GREEN → REFACTOR
      requirements:
        - Write tests first, always
        - Maintain >80% code coverage
        - Tests are documentation

    fail_fast_root_cause:
      principle: 2
      mantra: "Break loudly, fix completely"
      requirements:
        - No workarounds or band-aids
        - Fix causes, not symptoms
        - Errors must be obvious
        - No hiding bugs

    modular_maintainable:
      principle: 3
      mantra: "Single responsibility, loose coupling"
      requirements:
        - Each module does one thing well
        - Decoupled components
        - Easy to understand
        - Easy to extend

    reuse_before_build:
      principle: 4
      mantra: "Check first, create second"
      requirements:
        - Search existing code first
        - Use what exists
        - Document new creations
        - Avoid duplication

    open_source_first:
      principle: 5
      mantra: "Suggest alternatives, human decides"
      requirements:
        - Research existing libraries
        - AI suggests options
        - Human makes final choice
        - Prefer battle-tested solutions

    no_legacy_baggage:
      principle: 6
      mantra: "Clean slate, no debt"
      requirements:
        - No backwards compatibility constraints
        - No technical debt
        - Replace completely if needed
        - Fresh start mentality

    perfectionist_excellence:
      principle: 7
      mantra: "Best of breed only"
      requirements:
        - Quality over quantity
        - Ship when excellent
        - Hardcore standards
        - Excellence or nothing

  processes:
    tdd_workflow:
      _uri: "file://docs/processes/TDD_WORKFLOW.md"

      cycle:
        - phase: RED
          action: Write failing test first
          goal: Define desired behavior

        - phase: GREEN
          action: Write minimal code to pass
          goal: Make it work

        - phase: REFACTOR
          action: Improve code quality
          goal: Make it better

        - phase: COMMIT
          action: Save with clear message
          goal: Track progress

        - phase: REPEAT
          action: Next test
          goal: Continue development

      rules:
        - No code without tests
        - Tests describe behavior
        - Simplest solution first
        - Keep tests passing during refactor
        - Commit after each cycle

    pair_programming:
      _uri: "file://docs/guides/PAIR_PROGRAMMING_WITH_AI.md"

      roles:
        human_driver: "Strategic decisions, requirements, architecture"
        ai_navigator: "Tactical implementation, suggestions, code writing"

      workflow:
        - phase: ALIGN
          action: Establish shared understanding

        - phase: PLAN
          action: Agree on implementation approach

        - phase: IMPLEMENT
          action: Collaborate on coding

        - phase: REVIEW
          action: Mutual code assessment

        - phase: VALIDATE
          action: Confirm functionality

      communication:
        check_in_frequency: "Every 10-15 minutes"
        think_aloud: required
        clear_handoffs: required

      anti_patterns:
        - Silent coding without explanation
        - Making architectural assumptions
        - Big bang implementations
        - Ignoring feedback
        - No knowledge transfer

    session_management:
      _uri: "file://docs/guides/SESSION_STARTER.md"

      start_of_session:
        - Check git status and recent commits
        - Review active tasks
        - Run tests to ensure clean state
        - Review core methodology documents
        - Align on session goals

      session_template:
        sections:
          - goals
          - current_task
          - approach
          - check_in_schedule
          - end_of_session_checklist

      context_recovery:
        commands:
          - git status
          - git diff
          - git log --oneline -10

    task_documentation:
      _uri: "file://docs/guides/TASK_TEMPLATE.md"

      required_sections:
        - problem
        - investigation
        - solution
        - files_modified
        - files_created
        - code_changes
        - testing
        - result
        - side_effects
        - future_considerations
        - lessons_learned

    unified_principles:
      _uri: "file://docs/guides/UNIFIED_PRINCIPLES.md"

      hierarchy:
        - Test First (Principle 1)
        - Fail Fast (Principle 2)
        - Reuse Before Build (Principle 4)
        - Open Source First (Principle 5)
        - Quality Excellence (Principle 7)
        - No Tech Debt (Principle 6)
        - Modular Design (Principle 3)

      conflict_resolution: "Follow decision tree in guide"

  quality_standards:
    testing:
      coverage_minimum: 80
      coverage_target: 100
      execution_time_max_seconds: 5
      test_independence: required
      test_structure: AAA  # Arrange-Act-Assert

    code:
      type_hints: required
      docstrings: required
      style_guide: PEP 8
      complexity_max: 10
      function_length_max: 50
      class_length_max: 300

    commits:
      message_format: "type: short summary\n\ndetailed description\n\ntest evidence"
      require_tests: true
      require_passing_tests: true
      co_author: "Claude <noreply@anthropic.com>"

  enforcement:
    violations_policy: reject
    code_review_required: true
    ci_cd_gates:
      - All tests must pass
      - Coverage >80%
      - No new warnings
      - Style check passes

  decision_framework:
    before_coding:
      - question: "Have I written tests first?"
        principle: 1

      - question: "Will this fail loudly if wrong?"
        principle: 2

      - question: "Is this module focused?"
        principle: 3

      - question: "Did I check if this exists?"
        principle: 4

      - question: "Have I researched alternatives?"
        principle: 5

      - question: "Am I avoiding tech debt?"
        principle: 6

      - question: "Is this excellent?"
        principle: 7

    required_answers: "yes to all seven"
    action_if_no: "Don't code yet"

  documentation:
    principles_guide: "file://docs/principles/SACRED_SEVEN.md"
    tdd_workflow_guide: "file://docs/processes/TDD_WORKFLOW.md"
    pair_programming_guide: "file://docs/guides/PAIR_PROGRAMMING_WITH_AI.md"
    session_starter_guide: "file://docs/guides/SESSION_STARTER.md"
    unified_principles_guide: "file://docs/guides/UNIFIED_PRINCIPLES.md"
    task_template: "file://docs/guides/TASK_TEMPLATE.md"
    quick_reference: "file://docs/README.md"

  integration:
    usage: Load as base methodology for all projects
    combine_with:
      - python_standards
      - architecture_patterns
      - security_requirements
      - project_specific_rules

    merge_priority: foundation_layer
    override_policy: "Principles cannot be overridden, only extended"

mantras:
  ultimate: "Excellence or nothing"
  daily:
    - "Tests before code"
    - "Fail loud, fix deep"
    - "One job per module"
    - "Search before create"
    - "Suggest, don't decide"
    - "No debt, fresh start"
    - "Excellence or nothing"
